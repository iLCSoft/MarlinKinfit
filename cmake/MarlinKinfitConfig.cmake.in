##############################################################################
# cmake configuration file for MarlinKinfit
#
# Exported Targets
#
# MarlinKinfit::MarlinKinfit   The library with properly set depencies
#
# returns following variables:
#
#   MarlinKinfit_FOUND      : set to TRUE if MarlinKinfit found
#       if FIND_PACKAGE called with REQUIRED and COMPONENTS arguments
#       MarlinKinfit_FOUND is only set to TRUE if ALL components are also found
#       if REQUIRED is NOT set components may or may not be available
#
#   MarlinKinfit_ROOT       : path to this MarlinKinfit installation
#   MarlinKinfit_VERSION    : package version
#   MarlinKinfit_LIBRARIES  : list of MarlinKinfit libraries (NOT including COMPONENTS)
#   MarlinKinfit_INCLUDE_DIRS  : list of paths to be used with INCLUDE_DIRECTORIES
#   MarlinKinfit_LIBRARY_DIRS  : list of paths to be used with LINK_DIRECTORIES
#
# @author Jan Engels, Desy
##############################################################################
@PACKAGE_INIT@

include(CMakeFindDependencyMacro)
find_dependency(LCIO @LCIO_VERSION@)
find_dependency(CLHEP @CLHEP_VERSION@)
find_dependency(GSL @GSL_VERSION@)
find_dependency(ROOT @ROOT_VERSION@)
if (@AIDA_FOUND@)
	find_dependency(AIDA @AIDA_VERSION@)
endif()

if(NOT TARGET MarlinKinfit::MarlinKinfit)
	include("${CMAKE_CURRENT_LIST_DIR}/MarlinKinfitTargets.cmake")
endif()

check_required_components(MarlinKinFit)

# Full the MarlinKinfit_LIBARRIES variable to make things backwards compatible
set(MarlinKinfit_LIBRARIES MarlinKinfit::MarlinKinfit)
mark_as_advanced(MarlinKinfit_LIBRARIES)

include(FindPackageHandleStandardArgs)
get_property(TEST_MarlinKinfit_LIBRARY TARGET MarlinKinfit::MarlinKinfit PROPERTY LOCATION)
find_package_handle_standard_args(MarlinKinfit DEFAULT_MSG CMAKE_CURRENT_LIST_FILE TEST_MarlinKinfit_LIBRARY)
